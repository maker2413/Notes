#+TITLE: JavaScript Guide
#+PROPERTY: header-args

Javascript is a high-level, object-oriented, multi-paradigm programming
language. JavaScript is primarily known as the language of most modern web
browsers, and its early quirks gave it a bit of a bad reputation. However, the
language has continued to evolve and improve. JavaScript is a powerful,
flexible, and fast programming language now being used for increasingly complex
web development and beyond!

The role Javascript plays in web development is as follows:
- HTML :: is the actual content of the page.
- CSS :: is the presentation of the web page.
- Javascript :: is the actual programming language.

In recent years Javascript has been seen popping up outside of the web browser
world with tools like [[https://nodejs.org/en/][nodejs]] allowing Javascript applications to interact with
just a web server to make it more of a backend programming language. Or
implementations like [[https://angular.io/][angular]] bringing Javascript to the mobile or desktop
world. Also tools like [[https://reactjs.org/][react]] bringing Javascript to native desktop apps. These
addvances in the Javascript world make learning Javascript a vital tool to
almost any development field.

This guide is going to reference "modern" JavaScript. Modern JavaScript is noted
as any version of JavaScript after ES6: [[https://www.w3schools.com/js/js_versions.asp][JavaScript Versions]].

This first page will cover the absolute basic Fundamentals of JavaScript. If you
feel like you can skip this part feel free to jump to another section of the
guide:

* Comments
  Comments are written in JavaScript with ~//~. Multi line comments can be
  written with ~/*~ and ~*/~ to end a comment block:
  #+begin_src javascript
    // This is a comment

    /*
    This is a block of comments
    blah
    blah
    ,*/
  #+end_src

* Data Types
  Data types are the classifications we give to the different kinds of data that
  we use in programming. In JavaScript, there are seven fundamental data types:
  - Number: Any number, including numbers with decimals: 4, 8, 1516, 23.42.
  - String: Any grouping of characters on your keyboard (letters, numbers,
    spaces, symbols, etc.) surrounded by single quotes: ' ... ' or double quotes
    " ... ". Though we prefer single quotes. Some people like to think of string
    as a fancy word for text.
  - Boolean: This data type only has two possible values— either true or false
    (without quotes). It’s helpful to think of booleans as on and off switches
    or as the answers to a “yes” or “no” question.
  - Undefined: This data type is denoted by the keyword undefined (without
    quotes). It also represents the absence of a value though it has a different
    use than null.
  - Null: This data type represents the intentional absence of a value, and is
    represented by the keyword null (without quotes).
  - Symbol: A newer feature to the language, symbols are unique identifiers,
    useful in more complex coding. No need to worry about these for now.
  - BigInt: A newer featuer to the language, BigInt is used for larger integers
    than the Number type can hold.

  These datatypes are considered primitive data types. They are the most basic
  data types in the language. Objects are more complex, and we'll cover them
  later on.

  Its also important to note that JavaScript has dynamic typing. This means we
  do *not* have to manually define the type of data we will store in each
  variable. Instead data types are determined automatically.

** Tips
   - You can use the keyword ~typeof~ to see what data type a value or variable
     is.
   - Since JavaScript variables are dynamic you can change a variables data type
     but assigning it a value of a new data type and it will be updated on the
     fly.

* Declaring variables
  Declaring variables in JavaScript can be done with the ~let~, ~const~, and
  ~var~ keywords. The ~let~ and ~const~ variables were added in ES6+ (modern
  JavaScript).
  - ~let~ allows you to mutate (change) the variable:
    #+begin_src javascript
      let age = 30;
      age = 31;
    #+end_src
  - ~const~ makes a variable immutable (unchangable):
    #+begin_src javascript
      const year = 2021;
      // This would throw an error
      year = 2022;
    #+end_src
    It is worth noting that when using const the variable has to be assigned a
    value or JavaScript will throw an error about ~const~ missing a declaration.
  - ~var~ is more of a legacy feature of JavaScript and works pretty much the
    same as ~let~:
    #+begin_src javascript
      var job = 'programmer';
      job = 'teacher';
    #+end_src
    Usage of ~var~ should be mostly avoided as it is a legacy feature and has
    mostly been replaced by ~let~.

* Operators
  Operators allow us to change or work with values to put it simply. Lets at an
  example of some simple math operators:
  #+begin_src javascript
    const now = 2037;
    const ageJonas = now - 1991;
    const ageSarah = now - 2018;
    console.log(ageJonas, ageSarah);
    // Prints: 46 19

    console.log(ageJonas * 2, ageJonas / 10, 2 ** 3);
    // Prints: 92 4.6 8
    // 2 ** 3 means 2 to the power of 3

    const firstName = 'Jonas';
    const lastName = 'Cuomo';
    console.log(firstName + ' ' + lastName);
    // Prints: Jonas Cuomo
  #+end_src

  Now lets look at some assignment operators:
  #+begin_src javascript
    let x = 10 + 5; // 15
    x += 10; // 25
    x *= 4; // 100
    x ++; // 101
    x --; // 100
  #+end_src

  Lets also show some comparison operators:
  #+begin_src javascript
    console.log(ageJonas > ageSarah);
    // Prints: true

    console.log(ageSarah >= 18);
    // Prints: true
  #+end_src

** Tips
   Here is a guide on operator precedence which describes the order in which
   operators get executed when combined together in one statement:
   [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence][Operator Precedence]].

* Strings and Literals
  Strings can be written with single quotes or double quotes. Most of the time
  it is common to use single quotes for strings however sometimes we will need
  to use double quotes. Lets see and example of why:
  #+begin_src javascript
    const name = 'Jonas';
    const job = 'teacher';
    const birthYear = 1991;
    const year = 2037;

    // Here we will use double quotes since our string contains a single quote
    const jonas = "I'm " + name + ', a ' + (year - birthYear) + ' year old ' + job + '!';
    // Prints: I'm Jonas, a 46 year old teacher!
  #+end_src

  Now lets look at template Strings a newer feature to JavaScript as of
  ES6. Templates strings are notes with backticks: ~``~ and are able to have
  variables templated into them:
  #+begin_src javascript
    const jonasNew = `I'm ${name}, a ${year - birthYear} year old ${job}!`;
    // Prints: I'm Jonas, a 46 year old teacher!
  #+end_src

  Template Strings even allow us to create multi line Strings:
  #+begin_src javascript
    console.log('String with
    multiple
    lines');
    // Prints: String with
    //         multiple
    //         lines
  #+end_src

* If / Else Statements
  if/else statements in JavaScript are very similar to most other programming
  languages:
  #+begin_src javascript
    const age = 19;

    if(age >= 16) {
      console.log('Sarah can start driving!');
    } else {
      const yearsLeft = 18 - age;
      console.log(`Sarah has ${yearsLeft} to start driving.`);
    }
    // Prints: Sarah can start driving!
  #+end_src

* Type conversion and type coercion
  Type conversion is when convert the data type of a variable. Lets see an
  example of this:
  #+begin_src javascript
    const inputYear = '1991'; // Note this is a String
    console.log(Number(inputYear)); // Converts String to a Number
    // Prints: 1991
    // The variable is still a string however

    console.log(inputYear + 18);
    // Prints: 199118

    console.log(Number(inputYear) + 18);
    // Prints: 2009

    console.log(String(23)); // Converts to a String
    // Prints: 23
  #+end_src

  Type coercion is when we are dealing with two different types in our
  operators. Lets look at some examples:
  #+begin_src javascript
    console.log('I am ' + 23 + ' years old'); // This is an example of coercion
    // Prints: I am 23 years old

    console.log('23' + '10' + 3);
    // Prints: 23103

    console.log('23' / '2');
    // Prints: 11.5
  #+end_src

** Tips
   When using math operators like ~-~, ~*~, and ~/~ Strings are converted to
   Numbers and will be used in Math operations, however when using ~+~ Numbers
   will be converted to Strings and will be appended together. Lets see an
   example:
   #+begin_src javascript
     let n = '1' + 1; // '11'
     n = n - 1; // '10'
     console.log(n);
     // Prints: 10
   #+end_src

* Truthy and Falsy Values
  There are 5 Falsy values in JavaScript: 0, '', undefined, null, NaN (Not a
  Number). Lets see an example:
  #+begin_src javascript
    console.log(Boolean(0));
    // Prints: false
    console.log(Boolean(undefined));
    // Prints: false
    console.log(Boolean('Jonas'));
    // Prints: true
    console.log(Boolean({}));
    // Prints: true
    console.log(Boolean(''));
    // Prints: false
  #+end_src

* Equality Operators
  In JavaScript there are two main equality operators: ~==~ and ~===~. The
  difference between them is that the ~==~ does type coercion whereas the ~===~
  does not do type coercion. Lets see an example:
  #+begin_src javascript
    const age = '18';
    if (age === 18) console.log('Adult');
    // Doesn't print anything
    if (age == 18) console.log('Adult');
    // Prints: Adult
  #+end_src

  It is recommended most of the time to use the ~===~ so you are in fact getting
  the exact data type you expect.

** Tips
   You can also negate both the ~==~ operator and the ~===~ operator. This can
   be done like this respectively: ~!=~ and ~!==~. It is again recommended to
   use ~!==~ to make sure you are getting the exact data type you expect.

* Boolean Logic
  The most basic boolean logic in JavaScript are the and, or, and not
  operators. These work in JavaScript like they do in most other programming
  languages. In JavaScript they are written as follows:
  - ~&&~ :: The and operator in JavaScript
  - ~||~ :: The or operator in JavaScript
  - ~!~ :: The not operator in JavaScript

* The switch statement
  The switch statement is used when we want to compare a variable against
  multiple different cases and execute code if it matches a certain case. Lets
  look at an example of this:
  #+begin_src javascript
    const day = 'wednesday';

    switch(day) {
      case 'monday': // day === 'monday'
        console.log('Take notes');
        break;
      case 'tuesday':
        console.log('Cook');
        break;
      case 'wednesday':
      case 'thursday':
        console.log('Work');
        break;
      case 'friday':
        console.log('Play guitar');
        break;
      case 'saturday':
      case 'sunday':
        console.log('Relax');
        break;
      default: // Run this case if value matches no other case
        console.log('Invalid day!');
    }
    // Prints: Work
  #+end_src

* Ternary operators
  Ternary operators or conditional operator allows us to essentially write an
  if/else statement in one line. It is denoted with a ~?~. Lets see an example:
  #+begin_src javascript
    const age = 23;
    age >= 18 ? console.log('Of age to drink') :
    console.log('Not old enough to drink');
    // Prints: Of age to drink
  #+end_src

  The first statement before the ~:~ operator is what gets executed if the
  expression we are declaring is true whereas the statement after the ~:~
  operator is what gets executed if our expression is false.

** Tips
   You can also use ternary operators inline of other functions:
   #+begin_src javascript
     const age = 18
     console.log(`I can drink ${age >= 21 ? 'wine' : 'water'}`);
     // Prints: I can drink water
   #+end_src

* Strict mode
  Strict mode is a feature in JavaScript that will cause more errors and fail
  our program when we do things wrong whereas without JavaScript will silently
  fail and continue running our program. Using strict mode will force us to
  write more secure JavaScript applications. To use strict mode add
  ~'use strict';~ to the beginning of your program.
